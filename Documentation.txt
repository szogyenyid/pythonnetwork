Client:
	data: The last input the client got from the user.
	running: True, while the client is running. Exit when set to False.
	serversocket: The socket opened for connection to the server.
	settings: A list containing the values of each setting.
	trueSins: The synonymes of "True"
---------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------
	closeConnection():
		Closes the socket to the server.
	makeConnection():
		Prompts the user to add the IP and Port of the server, creates a socket, and connects to the server.
	initSettings():
		Opens cconfig.cfg, and 
---------------------------------------------------------------------------------------------------------------------------------------------------------
	class commandThread:
		Constantly looking for user input, only accepts Unicode.
	class listenThread:
		Constantly waiting for messages from server.
		If a message is received, prints it to the console.
		If server is closed, exits the client.
	class processThread:
		Constantly watching the "data" variable, and processing it.
		If data is "!quit", exits the client. Else sends it to the server as a message.
		If message couldn't be sent because the server closed, quits the client.

---------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------

Server:
	command: The string containing the command the server last got as input.
	message: The last message sent to the users.
	nextID: The ID of next connection, it can't be the same for 2 connections, even if they are from the same user.
	password: The password for accessing the server
	running: A boolean value. While it's True, the server is running.
	servercommands: The list of commands that can be used in the server.
	usercommands: The list of commands that the users can use. If a received message is a usercommand, it's not sent to other users.
	userNum: The number of current users connected to the server.
	users: The list of current users. It's elements are chatUser class instances.
---------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------
	getUserIndex(name):
		Returns the index of the user given in parameter.
		First, it checks the users for name, if no user found, checks for address.
		Doesn't return (returns NoneType) if no user is found.
	killAll():
		Kills all connections on server.
	listOfUsers():
		Prints the list of online users in a form of "ID Name Address".
	nameIsValid(name):
		Checks if the parameter name is available, and is not taken by another user. Return True is name is available, returns False else.
	makeConnection():
		Prompts the server's starter for his IP and Port, then creates a socket on that address, and listens on it.
	sendAll(message, n):
		Sends the parameter message to all users.
		Expects a boolean "n" parameter, which defines if the message is a server notification, or a message from SysOp.
	sendAllBut(user, message, n):
		Same as sendAll, but doesn't send the message to the user got as parameter.
	shutDown(sec):
		Warnings all users that server will shut down, and tells every 15 seconds in all chat.
		When the parameter time hits zero, all the connections are killed, and the server shuts down.
---------------------------------------------------------------------------------------------------------------------------------------------------------
	class chatUser:
		A class for every chat user connected.
		
		id: The unique ID of the connection.
		name: The shown username. Each user must have a name to use the chat. It can be changed.
		address: The IP address of the user.
		socket:	The socket used for connection with the user.
		runs: Boolean value, indicating if the client is connected.
		
		changeName(name):
			Prompts the user for a new name, checks if it's available, and sets it. 
			Calls sendAll() to notify other users about the name change.
		kill():
			Closes the connection to the user.
			Pops the user from the users list. Lowers userNum.
		kick():
			Sends a kick notification and kills the connection.
		quit():
			Sends a quit notification and kills the connection.
		handleCommand(command):
			Handles the command got in parameter, and calls the matching method.
		handleMessage(msg):
			Identifies if the data got from the user is a command or message. If it's a command, passes it to the handleCommand method, else sends it as a message.
---------------------------------------------------------------------------------------------------------------------------------------------------------
	class connectionThread:
		Takes care of new connections, adds new users to the users list, starts their thread.
		
		pswSucc: Boolean value, indicating if the user entered the correct password.
		
		getPass(clientsocket):
			Prompts the user for the server password, checks if it's right.
---------------------------------------------------------------------------------------------------------------------------------------------------------
	class commandThread:
		Processes the server terminal commands.
		
		handleCommand(command):
			Handles the command got in parameter, and calls the matching server function.
---------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------